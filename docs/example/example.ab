import stdlib as Thing from "github.com/arborlang/stdlib";

type foobar {
	foobar: Number;
	bazBar: Number;
};

type Test <TBaz> {
	Example: fn () -> Boolean;
	Name: String;
};

fn Test::__Construct() {
	
};

fn Bazzer (val: foobar) -> Number {
	match val {
		|> {foobar: 1, bazBar: 2} {
			return 23;
		}
		|> val.foobar == 10 || val.bazBar == 2 {
			return 0;
		}
	}
	return 1;
};

fn Test::Decorator<TCall> (val: TCall) -> TCall {
	if val == "something" {
		return help;
	} else if val.value > 1 {
		return narp;
	} else {
		hello;
	}
	const val = fatal new SomeRandomError();
	return val[33];
};

Decorator(fn (values: Number) -> Number {
	value.toString().someOtherAccess;
	value.toString() == "buttt"[0:2];
	try {
		signal new SomeRandomSignal();
		const warnResponse = warn new SomeRandomWarning();
		fatal new SomeRandomFatal();
	} handle (e: SomeRandomSignal) {
		continue;
	}
    handle (w: SomeRandomWarning) {
		continue with "RetryWarning";
	};
	return 2 + 1;
});

@Decorator
fn DecoratedVal (value: Number) -> Number{
	value.toString().someOtherAccess;
	value.toString() == "buttt"[0:2];
	try {
		signal new SomeRandomSignal();
		const warnResponse = warn new SomeRandomWarning();
		fatal new SomeRandomFatal();
	} handle (e: SomeRandomSignal) {
		continue;
	}
    handle (w: SomeRandomWarning) {
		continue with "RetryWarning";
	};
	return 2 + 1;
};

let test = new Test();
test |> DecoratedVal;

type Stringer extends iface1 {
	Thing: fn (xyz: String) -> String;
};

fn Stringer::Thing(xyz: String) -> String {
	return xyz;
};

type Find implements ABC, XYZ, ZZZ Boop;

type Thing String;
